name: Build And Test

on:
  push:
    branches: [ Assignment* ]
  pull_request:
    branches: [ Assignment* ]

jobs:
  build:
    defaults:
      run:
        working-directory: ./SecretSanta/
    runs-on:  ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Run Npm Build
      working-directory: ./SecretSanta/src/SecretSanta.Web/
      run: |
        npm install
        npm run build:prod
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore

    - name: Api Unit Tests
      run: dotnet test ./test/SecretSanta.Api.Tests/SecretSanta.Api.Tests.csproj --collect:"XPlat Code Coverage"

    - name: Web Integration Tests
      run: dotnet test ./test/SecretSanta.Web.Tests/SecretSanta.Web.Tests.csproj --collect:"XPlat Code Coverage"

    - name: Install Coverage Report Generator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Run Coverage Report Generator for Api
      run: |
        cd ~/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Api.Tests/TestResults/*/
        reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:/home/runner/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Api.Tests/coveragereport" -reporttypes:Html

    - name: Run Coverage Report Generator for Web
      run: |
        cd ~/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Web.Tests/TestResults/*/
        reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:/home/runner/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Web.Tests/coveragereport" -reporttypes:Html
        cd ~/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/
        
    - name: dotnet publish API
      run: dotnet publish ./src/SecretSanta.Api/SecretSanta.Api.csproj -c Release -o ${{env.DOTNET_ROOT}}/API

    - name: dotnet publish Web
      run: dotnet publish ./src/SecretSanta.Web/SecretSanta.Web.csproj -c Release -o ${{env.DOTNET_ROOT}}/Web
      
    - name: Get published contents
      run: ls -R ${{env.DOTNET_ROOT}}/Web

    - name: Copy Coverage Reports to Deployment Artifacts
      run: |
        mkdir ${{env.DOTNET_ROOT}}/Web/ApiTestCoverage/
        cp -R ./test/SecretSanta.Api.Tests/coveragereport/ ${{env.DOTNET_ROOT}}/Web/ApiTestCoverage/
        mkdir ${{env.DOTNET_ROOT}}/Web/WebTestCoverage/
        cp -R ./test/SecretSanta.Web.Tests/coveragereport/ ${{env.DOTNET_ROOT}}/Web/WebTestCoverage/
      
    - name: Upload API artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: .net-app_API
        path: ${{env.DOTNET_ROOT}}/API

    - name: Upload Web artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: .net-app_Web
        path: ${{env.DOTNET_ROOT}}/Web

    - name: Upload API Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: api_coverage_report
        path: ~/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Api.Tests/coveragereport

    - name: Upload Web Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: web_coverage_report
        path: ~/work/EWU-CSCD379-2021-Spring/EWU-CSCD379-2021-Spring/SecretSanta/test/SecretSanta.Web.Tests/coveragereport
        
    - name: Verify Build Badge
      working-directory: ./
      shell: pwsh
      run: |
        [bool]$buildBadgeExists=$false
        Get-Item ./README.md | Get-Content | Where-Object { $_ -like "*AssignmentBuild.yml/badge.svg*"} | Foreach-Object { $buildBadgeExists = $true; break }
        if(-not $buildBadgeExists) {
          throw "Build Badge does not exist in README.md"
        }
